"use strict";(self.webpackChunkweather_app=self.webpackChunkweather_app||[]).push([[826],{426:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),s=n.n(r),i=n(645),o=n.n(i)()(s());o.push([t.id,".loader {\n  border: 4px solid #cccccc;\n  border-top-color: cyan;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n  animation: spin 2s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\nh3 {\n  font-size: 0.8rem;\n}\n#date-time {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n}\nform {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  border-radius: 4px;\n}\n#error {\n  color: red;\n}\n.content {\n  display: flex;\n}\n.info {\n  display: flex;\n  flex-direction: column;\n}\n#container {\n  width: 80%;\n  height: auto;\n}\n#result {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n}\n.inline {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 0.5rem;\n}\n.dark-mode {\n  background-color: black;\n  color: white;\n  border: 1px solid white;\n}\n.light-mode {\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,sBAAsB;EACtB,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,kCAAkC;AACpC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;AACA;EACE,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,kBAAkB;AACpB;AACA;EACE,UAAU;AACZ;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,UAAU;EACV,YAAY;AACd;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;AACb;AACA;EACE,uBAAuB;EACvB,YAAY;EACZ,uBAAuB;AACzB;AACA;EACE,uBAAuB;EACvB,YAAY;EACZ,uBAAuB;AACzB",sourcesContent:[".loader {\r\n  border: 4px solid #cccccc;\r\n  border-top-color: cyan;\r\n  border-radius: 50%;\r\n  width: 16px;\r\n  height: 16px;\r\n  animation: spin 2s linear infinite;\r\n}\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\nh3 {\r\n  font-size: 0.8rem;\r\n}\r\n#date-time {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  border-radius: 4px;\r\n}\r\n#error {\r\n  color: red;\r\n}\r\n.content {\r\n  display: flex;\r\n}\r\n.info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n#container {\r\n  width: 80%;\r\n  height: auto;\r\n}\r\n#result {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 4px;\r\n}\r\n.inline {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n.dark-mode {\r\n  background-color: black;\r\n  color: white;\r\n  border: 1px solid white;\r\n}\r\n.light-mode {\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n}\r\n"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,s,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(o[u]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},o=[],a=0;a<t.length;a++){var u=t[a],l=r.base?u[0]+r.base:u[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var h=n(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==h)e[h].references++,e[h].updater(m);else{var f=s(m,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var i=r(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var a=n(i[o]);e[a].references--}for(var u=r(t,s),l=0;l<i.length;l++){var c=n(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,s&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},48:(t,e,n)=>{var r=n(379),s=n.n(r),i=n(795),o=n.n(i),a=n(569),u=n.n(a),l=n(565),c=n.n(l),d=n(216),h=n.n(d),m=n(589),f=n.n(m),y=n(426),p={};p.styleTagTransform=f(),p.setAttributes=c(),p.insert=u().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=h(),s()(y.Z,p),y.Z&&y.Z.locals&&y.Z.locals;class g extends Error{}class w extends g{constructor(t){super(`Invalid DateTime: ${t.toMessage()}`)}}class v extends g{constructor(t){super(`Invalid Interval: ${t.toMessage()}`)}}class A extends g{constructor(t){super(`Invalid Duration: ${t.toMessage()}`)}}class b extends g{}class T extends g{constructor(t){super(`Invalid unit ${t}`)}}class C extends g{}class S extends g{constructor(){super("Zone is an abstract class")}}const k="numeric",E="short",O="long",x={year:k,month:k,day:k},N={year:k,month:E,day:k},M={year:k,month:E,day:k,weekday:E},D={year:k,month:O,day:k},V={year:k,month:O,day:k,weekday:O},I={hour:k,minute:k},F={hour:k,minute:k,second:k},Z={hour:k,minute:k,second:k,timeZoneName:E},L={hour:k,minute:k,second:k,timeZoneName:O},$={hour:k,minute:k,hourCycle:"h23"},z={hour:k,minute:k,second:k,hourCycle:"h23"},B={hour:k,minute:k,second:k,hourCycle:"h23",timeZoneName:E},j={hour:k,minute:k,second:k,hourCycle:"h23",timeZoneName:O},q={year:k,month:k,day:k,hour:k,minute:k},_={year:k,month:k,day:k,hour:k,minute:k,second:k},U={year:k,month:E,day:k,hour:k,minute:k},H={year:k,month:E,day:k,hour:k,minute:k,second:k},W={year:k,month:E,day:k,weekday:E,hour:k,minute:k},R={year:k,month:O,day:k,hour:k,minute:k,timeZoneName:E},Y={year:k,month:O,day:k,hour:k,minute:k,second:k,timeZoneName:E},P={year:k,month:O,day:k,weekday:O,hour:k,minute:k,timeZoneName:O},J={year:k,month:O,day:k,weekday:O,hour:k,minute:k,second:k,timeZoneName:O};class G{get type(){throw new S}get name(){throw new S}get ianaName(){return this.name}get isUniversal(){throw new S}offsetName(t,e){throw new S}formatOffset(t,e){throw new S}offset(t){throw new S}equals(t){throw new S}get isValid(){throw new S}}let Q=null;class K extends G{static get instance(){return null===Q&&(Q=new K),Q}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return Ht(t,e,n)}formatOffset(t,e){return Pt(this.offset(t),e)}offset(t){return-new Date(t).getTimezoneOffset()}equals(t){return"system"===t.type}get isValid(){return!0}}let X={};const tt={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let et={};class nt extends G{static create(t){return et[t]||(et[t]=new nt(t)),et[t]}static resetCache(){et={},X={}}static isValidSpecifier(t){return this.isValidZone(t)}static isValidZone(t){if(!t)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:t}).format(),!0}catch(t){return!1}}constructor(t){super(),this.zoneName=t,this.valid=nt.isValidZone(t)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return Ht(t,e,n,this.name)}formatOffset(t,e){return Pt(this.offset(t),e)}offset(t){const e=new Date(t);if(isNaN(e))return NaN;const n=(r=this.name,X[r]||(X[r]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:r,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),X[r]);var r;let[s,i,o,a,u,l,c]=n.formatToParts?function(t,e){const n=t.formatToParts(e),r=[];for(let t=0;t<n.length;t++){const{type:e,value:s}=n[t],i=tt[e];"era"===e?r[i]=s:Et(i)||(r[i]=parseInt(s,10))}return r}(n,e):function(t,e){const n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,s,i,o,a,u,l,c]=r;return[o,s,i,a,u,l,c]}(n,e);"BC"===a&&(s=1-Math.abs(s));let d=+e;const h=d%1e3;return d-=h>=0?h:1e3+h,(qt({year:s,month:i,day:o,hour:24===u?0:u,minute:l,second:c,millisecond:0})-d)/6e4}equals(t){return"iana"===t.type&&t.name===this.name}get isValid(){return this.valid}}let rt={},st={};function it(t,e={}){const n=JSON.stringify([t,e]);let r=st[n];return r||(r=new Intl.DateTimeFormat(t,e),st[n]=r),r}let ot={},at={},ut=null;function lt(t,e,n,r){const s=t.listingMode();return"error"===s?null:"en"===s?n(e):r(e)}class ct{constructor(t,e,n){this.padTo=n.padTo||0,this.floor=n.floor||!1;const{padTo:r,floor:s,...i}=n;if(!e||Object.keys(i).length>0){const e={useGrouping:!1,...n};n.padTo>0&&(e.minimumIntegerDigits=n.padTo),this.inf=function(t,e={}){const n=JSON.stringify([t,e]);let r=ot[n];return r||(r=new Intl.NumberFormat(t,e),ot[n]=r),r}(t,e)}}format(t){if(this.inf){const e=this.floor?Math.floor(t):t;return this.inf.format(e)}return It(this.floor?Math.floor(t):$t(t,3),this.padTo)}}class dt{constructor(t,e,n){let r;if(this.opts=n,this.originalZone=void 0,this.opts.timeZone)this.dt=t;else if("fixed"===t.zone.type){const e=t.offset/60*-1,n=e>=0?`Etc/GMT+${e}`:`Etc/GMT${e}`;0!==t.offset&&nt.create(n).valid?(r=n,this.dt=t):(r="UTC",this.dt=0===t.offset?t:t.setZone("UTC").plus({minutes:t.offset}),this.originalZone=t.zone)}else"system"===t.zone.type?this.dt=t:"iana"===t.zone.type?(this.dt=t,r=t.zone.name):(r="UTC",this.dt=t.setZone("UTC").plus({minutes:t.offset}),this.originalZone=t.zone);const s={...this.opts};s.timeZone=s.timeZone||r,this.dtf=it(e,s)}format(){return this.originalZone?this.formatToParts().map((({value:t})=>t)).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const t=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?t.map((t=>{if("timeZoneName"===t.type){const e=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...t,value:e}}return t})):t}resolvedOptions(){return this.dtf.resolvedOptions()}}class ht{constructor(t,e,n){this.opts={style:"long",...n},!e&&Nt()&&(this.rtf=function(t,e={}){const{base:n,...r}=e,s=JSON.stringify([t,r]);let i=at[s];return i||(i=new Intl.RelativeTimeFormat(t,e),at[s]=i),i}(t,n))}format(t,e){return this.rtf?this.rtf.format(t,e):function(t,e,n="always",r=!1){const s={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},i=-1===["hours","minutes","seconds"].indexOf(t);if("auto"===n&&i){const n="days"===t;switch(e){case 1:return n?"tomorrow":`next ${s[t][0]}`;case-1:return n?"yesterday":`last ${s[t][0]}`;case 0:return n?"today":`this ${s[t][0]}`}}const o=Object.is(e,-0)||e<0,a=Math.abs(e),u=1===a,l=s[t],c=r?u?l[1]:l[2]||l[1]:u?s[t][0]:t;return o?`${a} ${c} ago`:`in ${a} ${c}`}(e,t,this.opts.numeric,"long"!==this.opts.style)}formatToParts(t,e){return this.rtf?this.rtf.formatToParts(t,e):[]}}class mt{static fromOpts(t){return mt.create(t.locale,t.numberingSystem,t.outputCalendar,t.defaultToEN)}static create(t,e,n,r=!1){const s=t||kt.defaultLocale,i=s||(r?"en-US":ut||(ut=(new Intl.DateTimeFormat).resolvedOptions().locale,ut)),o=e||kt.defaultNumberingSystem,a=n||kt.defaultOutputCalendar;return new mt(i,o,a,s)}static resetCache(){ut=null,st={},ot={},at={}}static fromObject({locale:t,numberingSystem:e,outputCalendar:n}={}){return mt.create(t,e,n)}constructor(t,e,n,r){const[s,i,o]=function(t){const e=t.indexOf("-x-");-1!==e&&(t=t.substring(0,e));const n=t.indexOf("-u-");if(-1===n)return[t];{let e,r;try{e=it(t).resolvedOptions(),r=t}catch(s){const i=t.substring(0,n);e=it(i).resolvedOptions(),r=i}const{numberingSystem:s,calendar:i}=e;return[r,s,i]}}(t);this.locale=s,this.numberingSystem=e||i||null,this.outputCalendar=n||o||null,this.intl=function(t,e,n){return n||e?(t.includes("-u-")||(t+="-u"),n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`),t):t}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=r,this.fastNumbersCached=null}get fastNumbers(){var t;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(t=this).numberingSystem||"latn"===t.numberingSystem)&&("latn"===t.numberingSystem||!t.locale||t.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}listingMode(){const t=this.isEnglish(),e=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return t&&e?"en":"intl"}clone(t){return t&&0!==Object.getOwnPropertyNames(t).length?mt.create(t.locale||this.specifiedLocale,t.numberingSystem||this.numberingSystem,t.outputCalendar||this.outputCalendar,t.defaultToEN||!1):this}redefaultToEN(t={}){return this.clone({...t,defaultToEN:!0})}redefaultToSystem(t={}){return this.clone({...t,defaultToEN:!1})}months(t,e=!1){return lt(this,t,Xt,(()=>{const n=e?{month:t,day:"numeric"}:{month:t},r=e?"format":"standalone";return this.monthsCache[r][t]||(this.monthsCache[r][t]=function(t){const e=[];for(let n=1;n<=12;n++){const r=mr.utc(2009,n,1);e.push(t(r))}return e}((t=>this.extract(t,n,"month")))),this.monthsCache[r][t]}))}weekdays(t,e=!1){return lt(this,t,re,(()=>{const n=e?{weekday:t,year:"numeric",month:"long",day:"numeric"}:{weekday:t},r=e?"format":"standalone";return this.weekdaysCache[r][t]||(this.weekdaysCache[r][t]=function(t){const e=[];for(let n=1;n<=7;n++){const r=mr.utc(2016,11,13+n);e.push(t(r))}return e}((t=>this.extract(t,n,"weekday")))),this.weekdaysCache[r][t]}))}meridiems(){return lt(this,void 0,(()=>se),(()=>{if(!this.meridiemCache){const t={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[mr.utc(2016,11,13,9),mr.utc(2016,11,13,19)].map((e=>this.extract(e,t,"dayperiod")))}return this.meridiemCache}))}eras(t){return lt(this,t,ue,(()=>{const e={era:t};return this.eraCache[t]||(this.eraCache[t]=[mr.utc(-40,1,1),mr.utc(2017,1,1)].map((t=>this.extract(t,e,"era")))),this.eraCache[t]}))}extract(t,e,n){const r=this.dtFormatter(t,e).formatToParts().find((t=>t.type.toLowerCase()===n));return r?r.value:null}numberFormatter(t={}){return new ct(this.intl,t.forceSimple||this.fastNumbers,t)}dtFormatter(t,e={}){return new dt(t,this.intl,e)}relFormatter(t={}){return new ht(this.intl,this.isEnglish(),t)}listFormatter(t={}){return function(t,e={}){const n=JSON.stringify([t,e]);let r=rt[n];return r||(r=new Intl.ListFormat(t,e),rt[n]=r),r}(this.intl,t)}isEnglish(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(t){return this.locale===t.locale&&this.numberingSystem===t.numberingSystem&&this.outputCalendar===t.outputCalendar}}let ft=null;class yt extends G{static get utcInstance(){return null===ft&&(ft=new yt(0)),ft}static instance(t){return 0===t?yt.utcInstance:new yt(t)}static parseSpecifier(t){if(t){const e=t.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(e)return new yt(Wt(e[1],e[2]))}return null}constructor(t){super(),this.fixed=t}get type(){return"fixed"}get name(){return 0===this.fixed?"UTC":`UTC${Pt(this.fixed,"narrow")}`}get ianaName(){return 0===this.fixed?"Etc/UTC":`Etc/GMT${Pt(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(t,e){return Pt(this.fixed,e)}get isUniversal(){return!0}offset(){return this.fixed}equals(t){return"fixed"===t.type&&t.fixed===this.fixed}get isValid(){return!0}}class pt extends G{constructor(t){super(),this.zoneName=t}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function gt(t,e){if(Et(t)||null===t)return e;if(t instanceof G)return t;if("string"==typeof t){const n=t.toLowerCase();return"default"===n?e:"local"===n||"system"===n?K.instance:"utc"===n||"gmt"===n?yt.utcInstance:yt.parseSpecifier(n)||nt.create(t)}return Ot(t)?yt.instance(t):"object"==typeof t&&"offset"in t&&"function"==typeof t.offset?t:new pt(t)}let wt,vt=()=>Date.now(),At="system",bt=null,Tt=null,Ct=null,St=60;class kt{static get now(){return vt}static set now(t){vt=t}static set defaultZone(t){At=t}static get defaultZone(){return gt(At,K.instance)}static get defaultLocale(){return bt}static set defaultLocale(t){bt=t}static get defaultNumberingSystem(){return Tt}static set defaultNumberingSystem(t){Tt=t}static get defaultOutputCalendar(){return Ct}static set defaultOutputCalendar(t){Ct=t}static get twoDigitCutoffYear(){return St}static set twoDigitCutoffYear(t){St=t%100}static get throwOnInvalid(){return wt}static set throwOnInvalid(t){wt=t}static resetCaches(){mt.resetCache(),nt.resetCache()}}function Et(t){return void 0===t}function Ot(t){return"number"==typeof t}function xt(t){return"number"==typeof t&&t%1==0}function Nt(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(t){return!1}}function Mt(t,e,n){if(0!==t.length)return t.reduce(((t,r)=>{const s=[e(r),r];return t&&n(t[0],s[0])===t[0]?t:s}),null)[1]}function Dt(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function Vt(t,e,n){return xt(t)&&t>=e&&t<=n}function It(t,e=2){let n;return n=t<0?"-"+(""+-t).padStart(e,"0"):(""+t).padStart(e,"0"),n}function Ft(t){return Et(t)||null===t||""===t?void 0:parseInt(t,10)}function Zt(t){return Et(t)||null===t||""===t?void 0:parseFloat(t)}function Lt(t){if(!Et(t)&&null!==t&&""!==t){const e=1e3*parseFloat("0."+t);return Math.floor(e)}}function $t(t,e,n=!1){const r=10**e;return(n?Math.trunc:Math.round)(t*r)/r}function zt(t){return t%4==0&&(t%100!=0||t%400==0)}function Bt(t){return zt(t)?366:365}function jt(t,e){const n=(r=e-1)-12*Math.floor(r/12)+1;var r;return 2===n?zt(t+(e-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function qt(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(t.year,t.month-1,t.day)),+e}function _t(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,r=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return 4===e||3===r?53:52}function Ut(t){return t>99?t:t>kt.twoDigitCutoffYear?1900+t:2e3+t}function Ht(t,e,n,r=null){const s=new Date(t),i={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(i.timeZone=r);const o={timeZoneName:e,...i},a=new Intl.DateTimeFormat(n,o).formatToParts(s).find((t=>"timezonename"===t.type.toLowerCase()));return a?a.value:null}function Wt(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const r=parseInt(e,10)||0;return 60*n+(n<0||Object.is(n,-0)?-r:r)}function Rt(t){const e=Number(t);if("boolean"==typeof t||""===t||Number.isNaN(e))throw new C(`Invalid unit value ${t}`);return e}function Yt(t,e){const n={};for(const r in t)if(Dt(t,r)){const s=t[r];if(null==s)continue;n[e(r)]=Rt(s)}return n}function Pt(t,e){const n=Math.trunc(Math.abs(t/60)),r=Math.trunc(Math.abs(t%60)),s=t>=0?"+":"-";switch(e){case"short":return`${s}${It(n,2)}:${It(r,2)}`;case"narrow":return`${s}${n}${r>0?`:${r}`:""}`;case"techie":return`${s}${It(n,2)}${It(r,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function Jt(t){return function(t,e){return["hour","minute","second","millisecond"].reduce(((e,n)=>(e[n]=t[n],e)),{})}(t)}const Gt=["January","February","March","April","May","June","July","August","September","October","November","December"],Qt=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],Kt=["J","F","M","A","M","J","J","A","S","O","N","D"];function Xt(t){switch(t){case"narrow":return[...Kt];case"short":return[...Qt];case"long":return[...Gt];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const te=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],ee=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],ne=["M","T","W","T","F","S","S"];function re(t){switch(t){case"narrow":return[...ne];case"short":return[...ee];case"long":return[...te];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const se=["AM","PM"],ie=["Before Christ","Anno Domini"],oe=["BC","AD"],ae=["B","A"];function ue(t){switch(t){case"narrow":return[...ae];case"short":return[...oe];case"long":return[...ie];default:return null}}function le(t,e){let n="";for(const r of t)r.literal?n+=r.val:n+=e(r.val);return n}const ce={D:x,DD:N,DDD:D,DDDD:V,t:I,tt:F,ttt:Z,tttt:L,T:$,TT:z,TTT:B,TTTT:j,f:q,ff:U,fff:R,ffff:P,F:_,FF:H,FFF:Y,FFFF:J};class de{static create(t,e={}){return new de(t,e)}static parseFormat(t){let e=null,n="",r=!1;const s=[];for(let i=0;i<t.length;i++){const o=t.charAt(i);"'"===o?(n.length>0&&s.push({literal:r||/^\s+$/.test(n),val:n}),e=null,n="",r=!r):r||o===e?n+=o:(n.length>0&&s.push({literal:/^\s+$/.test(n),val:n}),n=o,e=o)}return n.length>0&&s.push({literal:r||/^\s+$/.test(n),val:n}),s}static macroTokenToFormatOpts(t){return ce[t]}constructor(t,e){this.opts=e,this.loc=t,this.systemLoc=null}formatWithSystemDefault(t,e){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(t,{...this.opts,...e}).format()}dtFormatter(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e})}formatDateTime(t,e){return this.dtFormatter(t,e).format()}formatDateTimeParts(t,e){return this.dtFormatter(t,e).formatToParts()}formatInterval(t,e){return this.dtFormatter(t.start,e).dtf.formatRange(t.start.toJSDate(),t.end.toJSDate())}resolvedOptions(t,e){return this.dtFormatter(t,e).resolvedOptions()}num(t,e=0){if(this.opts.forceSimple)return It(t,e);const n={...this.opts};return e>0&&(n.padTo=e),this.loc.numberFormatter(n).format(t)}formatDateTimeFromString(t,e){const n="en"===this.loc.listingMode(),r=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,s=(e,n)=>this.loc.extract(t,e,n),i=e=>t.isOffsetFixed&&0===t.offset&&e.allowZ?"Z":t.isValid?t.zone.formatOffset(t.ts,e.format):"",o=(e,r)=>n?function(t,e){return Xt(e)[t.month-1]}(t,e):s(r?{month:e}:{month:e,day:"numeric"},"month"),a=(e,r)=>n?function(t,e){return re(e)[t.weekday-1]}(t,e):s(r?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday"),u=e=>{const n=de.macroTokenToFormatOpts(e);return n?this.formatWithSystemDefault(t,n):e},l=e=>n?function(t,e){return ue(e)[t.year<0?0:1]}(t,e):s({era:e},"era");return le(de.parseFormat(e),(e=>{switch(e){case"S":return this.num(t.millisecond);case"u":case"SSS":return this.num(t.millisecond,3);case"s":return this.num(t.second);case"ss":return this.num(t.second,2);case"uu":return this.num(Math.floor(t.millisecond/10),2);case"uuu":return this.num(Math.floor(t.millisecond/100));case"m":return this.num(t.minute);case"mm":return this.num(t.minute,2);case"h":return this.num(t.hour%12==0?12:t.hour%12);case"hh":return this.num(t.hour%12==0?12:t.hour%12,2);case"H":return this.num(t.hour);case"HH":return this.num(t.hour,2);case"Z":return i({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return i({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return t.zone.offsetName(t.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return t.zone.offsetName(t.ts,{format:"long",locale:this.loc.locale});case"z":return t.zoneName;case"a":return n?function(t){return se[t.hour<12?0:1]}(t):s({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return r?s({day:"numeric"},"day"):this.num(t.day);case"dd":return r?s({day:"2-digit"},"day"):this.num(t.day,2);case"c":case"E":return this.num(t.weekday);case"ccc":return a("short",!0);case"cccc":return a("long",!0);case"ccccc":return a("narrow",!0);case"EEE":return a("short",!1);case"EEEE":return a("long",!1);case"EEEEE":return a("narrow",!1);case"L":return r?s({month:"numeric",day:"numeric"},"month"):this.num(t.month);case"LL":return r?s({month:"2-digit",day:"numeric"},"month"):this.num(t.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return r?s({month:"numeric"},"month"):this.num(t.month);case"MM":return r?s({month:"2-digit"},"month"):this.num(t.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return r?s({year:"numeric"},"year"):this.num(t.year);case"yy":return r?s({year:"2-digit"},"year"):this.num(t.year.toString().slice(-2),2);case"yyyy":return r?s({year:"numeric"},"year"):this.num(t.year,4);case"yyyyyy":return r?s({year:"numeric"},"year"):this.num(t.year,6);case"G":return l("short");case"GG":return l("long");case"GGGGG":return l("narrow");case"kk":return this.num(t.weekYear.toString().slice(-2),2);case"kkkk":return this.num(t.weekYear,4);case"W":return this.num(t.weekNumber);case"WW":return this.num(t.weekNumber,2);case"o":return this.num(t.ordinal);case"ooo":return this.num(t.ordinal,3);case"q":return this.num(t.quarter);case"qq":return this.num(t.quarter,2);case"X":return this.num(Math.floor(t.ts/1e3));case"x":return this.num(t.ts);default:return u(e)}}))}formatDurationFromString(t,e){const n=t=>{switch(t[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},r=de.parseFormat(e),s=r.reduce(((t,{literal:e,val:n})=>e?t:t.concat(n)),[]);return le(r,(t=>e=>{const r=n(e);return r?this.num(t.get(r),e.length):e})(t.shiftTo(...s.map(n).filter((t=>t)))))}}class he{constructor(t,e){this.reason=t,this.explanation=e}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const me=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function fe(...t){const e=t.reduce(((t,e)=>t+e.source),"");return RegExp(`^${e}$`)}function ye(...t){return e=>t.reduce((([t,n,r],s)=>{const[i,o,a]=s(e,r);return[{...t,...i},o||n,a]}),[{},null,1]).slice(0,2)}function pe(t,...e){if(null==t)return[null,null];for(const[n,r]of e){const e=n.exec(t);if(e)return r(e)}return[null,null]}function ge(...t){return(e,n)=>{const r={};let s;for(s=0;s<t.length;s++)r[t[s]]=Ft(e[n+s]);return[r,null,n+s]}}const we=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,ve=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,Ae=RegExp(`${ve.source}(?:${we.source}?(?:\\[(${me.source})\\])?)?`),be=RegExp(`(?:T${Ae.source})?`),Te=ge("weekYear","weekNumber","weekDay"),Ce=ge("year","ordinal"),Se=RegExp(`${ve.source} ?(?:${we.source}|(${me.source}))?`),ke=RegExp(`(?: ${Se.source})?`);function Ee(t,e,n){const r=t[e];return Et(r)?n:Ft(r)}function Oe(t,e){return[{hours:Ee(t,e,0),minutes:Ee(t,e+1,0),seconds:Ee(t,e+2,0),milliseconds:Lt(t[e+3])},null,e+4]}function xe(t,e){const n=!t[e]&&!t[e+1],r=Wt(t[e+1],t[e+2]);return[{},n?null:yt.instance(r),e+3]}function Ne(t,e){return[{},t[e]?nt.create(t[e]):null,e+1]}const Me=RegExp(`^T?${ve.source}$`),De=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function Ve(t){const[e,n,r,s,i,o,a,u,l]=t,c="-"===e[0],d=u&&"-"===u[0],h=(t,e=!1)=>void 0!==t&&(e||t&&c)?-t:t;return[{years:h(Zt(n)),months:h(Zt(r)),weeks:h(Zt(s)),days:h(Zt(i)),hours:h(Zt(o)),minutes:h(Zt(a)),seconds:h(Zt(u),"-0"===u),milliseconds:h(Lt(l),d)}]}const Ie={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Fe(t,e,n,r,s,i,o){const a={year:2===e.length?Ut(Ft(e)):Ft(e),month:Qt.indexOf(n)+1,day:Ft(r),hour:Ft(s),minute:Ft(i)};return o&&(a.second=Ft(o)),t&&(a.weekday=t.length>3?te.indexOf(t)+1:ee.indexOf(t)+1),a}const Ze=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Le(t){const[,e,n,r,s,i,o,a,u,l,c,d]=t,h=Fe(e,s,r,n,i,o,a);let m;return m=u?Ie[u]:l?0:Wt(c,d),[h,new yt(m)]}const $e=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,ze=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Be=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function je(t){const[,e,n,r,s,i,o,a]=t;return[Fe(e,s,r,n,i,o,a),yt.utcInstance]}function qe(t){const[,e,n,r,s,i,o,a]=t;return[Fe(e,a,n,r,s,i,o),yt.utcInstance]}const _e=fe(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,be),Ue=fe(/(\d{4})-?W(\d\d)(?:-?(\d))?/,be),He=fe(/(\d{4})-?(\d{3})/,be),We=fe(Ae),Re=ye((function(t,e){return[{year:Ee(t,e),month:Ee(t,e+1,1),day:Ee(t,e+2,1)},null,e+3]}),Oe,xe,Ne),Ye=ye(Te,Oe,xe,Ne),Pe=ye(Ce,Oe,xe,Ne),Je=ye(Oe,xe,Ne),Ge=ye(Oe),Qe=fe(/(\d{4})-(\d\d)-(\d\d)/,ke),Ke=fe(Se),Xe=ye(Oe,xe,Ne),tn="Invalid Duration",en={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},nn={years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6},...en},rn={years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3},...en},sn=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],on=sn.slice(0).reverse();function an(t,e,n=!1){const r={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy,matrix:e.matrix||t.matrix};return new cn(r)}function un(t,e){let n=e.milliseconds??0;for(const r of on.slice(1))e[r]&&(n+=e[r]*t[r].milliseconds);return n}function ln(t,e){const n=un(t,e)<0?-1:1;sn.reduceRight(((r,s)=>{if(Et(e[s]))return r;if(r){const i=e[r]*n,o=t[s][r],a=Math.floor(i/o);e[s]+=a*n,e[r]-=a*o*n}return s}),null),sn.reduce(((n,r)=>{if(Et(e[r]))return n;if(n){const s=e[n]%1;e[n]-=s,e[r]+=s*t[n][r]}return r}),null)}class cn{constructor(t){const e="longterm"===t.conversionAccuracy||!1;let n=e?rn:nn;t.matrix&&(n=t.matrix),this.values=t.values,this.loc=t.loc||mt.create(),this.conversionAccuracy=e?"longterm":"casual",this.invalid=t.invalid||null,this.matrix=n,this.isLuxonDuration=!0}static fromMillis(t,e){return cn.fromObject({milliseconds:t},e)}static fromObject(t,e={}){if(null==t||"object"!=typeof t)throw new C("Duration.fromObject: argument expected to be an object, got "+(null===t?"null":typeof t));return new cn({values:Yt(t,cn.normalizeUnit),loc:mt.fromObject(e),conversionAccuracy:e.conversionAccuracy,matrix:e.matrix})}static fromDurationLike(t){if(Ot(t))return cn.fromMillis(t);if(cn.isDuration(t))return t;if("object"==typeof t)return cn.fromObject(t);throw new C(`Unknown duration argument ${t} of type ${typeof t}`)}static fromISO(t,e){const[n]=function(t){return pe(t,[De,Ve])}(t);return n?cn.fromObject(n,e):cn.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static fromISOTime(t,e){const[n]=function(t){return pe(t,[Me,Ge])}(t);return n?cn.fromObject(n,e):cn.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static invalid(t,e=null){if(!t)throw new C("need to specify a reason the Duration is invalid");const n=t instanceof he?t:new he(t,e);if(kt.throwOnInvalid)throw new A(n);return new cn({invalid:n})}static normalizeUnit(t){const e={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[t?t.toLowerCase():t];if(!e)throw new T(t);return e}static isDuration(t){return t&&t.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(t,e={}){const n={...e,floor:!1!==e.round&&!1!==e.floor};return this.isValid?de.create(this.loc,n).formatDurationFromString(this,t):tn}toHuman(t={}){if(!this.isValid)return tn;const e=sn.map((e=>{const n=this.values[e];return Et(n)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...t,unit:e.slice(0,-1)}).format(n)})).filter((t=>t));return this.loc.listFormatter({type:"conjunction",style:t.listStyle||"narrow",...t}).format(e)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let t="P";return 0!==this.years&&(t+=this.years+"Y"),0===this.months&&0===this.quarters||(t+=this.months+3*this.quarters+"M"),0!==this.weeks&&(t+=this.weeks+"W"),0!==this.days&&(t+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(t+="T"),0!==this.hours&&(t+=this.hours+"H"),0!==this.minutes&&(t+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(t+=$t(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===t&&(t+="T0S"),t}toISOTime(t={}){if(!this.isValid)return null;const e=this.toMillis();return e<0||e>=864e5?null:(t={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...t,includeOffset:!1},mr.fromMillis(e,{zone:"UTC"}).toISOTime(t))}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.isValid?un(this.matrix,this.values):NaN}valueOf(){return this.toMillis()}plus(t){if(!this.isValid)return this;const e=cn.fromDurationLike(t),n={};for(const t of sn)(Dt(e.values,t)||Dt(this.values,t))&&(n[t]=e.get(t)+this.get(t));return an(this,{values:n},!0)}minus(t){if(!this.isValid)return this;const e=cn.fromDurationLike(t);return this.plus(e.negate())}mapUnits(t){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=Rt(t(this.values[n],n));return an(this,{values:e},!0)}get(t){return this[cn.normalizeUnit(t)]}set(t){return this.isValid?an(this,{values:{...this.values,...Yt(t,cn.normalizeUnit)}}):this}reconfigure({locale:t,numberingSystem:e,conversionAccuracy:n,matrix:r}={}){return an(this,{loc:this.loc.clone({locale:t,numberingSystem:e}),matrix:r,conversionAccuracy:n})}as(t){return this.isValid?this.shiftTo(t).get(t):NaN}normalize(){if(!this.isValid)return this;const t=this.toObject();return ln(this.matrix,t),an(this,{values:t},!0)}rescale(){return this.isValid?an(this,{values:function(t){const e={};for(const[n,r]of Object.entries(t))0!==r&&(e[n]=r);return e}(this.normalize().shiftToAll().toObject())},!0):this}shiftTo(...t){if(!this.isValid)return this;if(0===t.length)return this;t=t.map((t=>cn.normalizeUnit(t)));const e={},n={},r=this.toObject();let s;for(const i of sn)if(t.indexOf(i)>=0){s=i;let t=0;for(const e in n)t+=this.matrix[e][i]*n[e],n[e]=0;Ot(r[i])&&(t+=r[i]);const o=Math.trunc(t);e[i]=o,n[i]=(1e3*t-1e3*o)/1e3}else Ot(r[i])&&(n[i]=r[i]);for(const t in n)0!==n[t]&&(e[s]+=t===s?n[t]:n[t]/this.matrix[s][t]);return ln(this.matrix,e),an(this,{values:e},!0)}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const t={};for(const e of Object.keys(this.values))t[e]=0===this.values[e]?0:-this.values[e];return an(this,{values:t},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(t){if(!this.isValid||!t.isValid)return!1;if(!this.loc.equals(t.loc))return!1;for(const r of sn)if(e=this.values[r],n=t.values[r],!(void 0===e||0===e?void 0===n||0===n:e===n))return!1;var e,n;return!0}}const dn="Invalid Interval";class hn{constructor(t){this.s=t.start,this.e=t.end,this.invalid=t.invalid||null,this.isLuxonInterval=!0}static invalid(t,e=null){if(!t)throw new C("need to specify a reason the Interval is invalid");const n=t instanceof he?t:new he(t,e);if(kt.throwOnInvalid)throw new v(n);return new hn({invalid:n})}static fromDateTimes(t,e){const n=fr(t),r=fr(e),s=function(t,e){return t&&t.isValid?e&&e.isValid?e<t?hn.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null:hn.invalid("missing or invalid end"):hn.invalid("missing or invalid start")}(n,r);return null==s?new hn({start:n,end:r}):s}static after(t,e){const n=cn.fromDurationLike(e),r=fr(t);return hn.fromDateTimes(r,r.plus(n))}static before(t,e){const n=cn.fromDurationLike(e),r=fr(t);return hn.fromDateTimes(r.minus(n),r)}static fromISO(t,e){const[n,r]=(t||"").split("/",2);if(n&&r){let t,s,i,o;try{t=mr.fromISO(n,e),s=t.isValid}catch(r){s=!1}try{i=mr.fromISO(r,e),o=i.isValid}catch(r){o=!1}if(s&&o)return hn.fromDateTimes(t,i);if(s){const n=cn.fromISO(r,e);if(n.isValid)return hn.after(t,n)}else if(o){const t=cn.fromISO(n,e);if(t.isValid)return hn.before(i,t)}}return hn.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static isInterval(t){return t&&t.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return null===this.invalidReason}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(t="milliseconds"){return this.isValid?this.toDuration(t).get(t):NaN}count(t="milliseconds"){if(!this.isValid)return NaN;const e=this.start.startOf(t),n=this.end.startOf(t);return Math.floor(n.diff(e,t).get(t))+(n.valueOf()!==this.end.valueOf())}hasSame(t){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,t))}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(t){return!!this.isValid&&this.s>t}isBefore(t){return!!this.isValid&&this.e<=t}contains(t){return!!this.isValid&&this.s<=t&&this.e>t}set({start:t,end:e}={}){return this.isValid?hn.fromDateTimes(t||this.s,e||this.e):this}splitAt(...t){if(!this.isValid)return[];const e=t.map(fr).filter((t=>this.contains(t))).sort(),n=[];let{s:r}=this,s=0;for(;r<this.e;){const t=e[s]||this.e,i=+t>+this.e?this.e:t;n.push(hn.fromDateTimes(r,i)),r=i,s+=1}return n}splitBy(t){const e=cn.fromDurationLike(t);if(!this.isValid||!e.isValid||0===e.as("milliseconds"))return[];let n,{s:r}=this,s=1;const i=[];for(;r<this.e;){const t=this.start.plus(e.mapUnits((t=>t*s)));n=+t>+this.e?this.e:t,i.push(hn.fromDateTimes(r,n)),r=n,s+=1}return i}divideEqually(t){return this.isValid?this.splitBy(this.length()/t).slice(0,t):[]}overlaps(t){return this.e>t.s&&this.s<t.e}abutsStart(t){return!!this.isValid&&+this.e==+t.s}abutsEnd(t){return!!this.isValid&&+t.e==+this.s}engulfs(t){return!!this.isValid&&this.s<=t.s&&this.e>=t.e}equals(t){return!(!this.isValid||!t.isValid)&&this.s.equals(t.s)&&this.e.equals(t.e)}intersection(t){if(!this.isValid)return this;const e=this.s>t.s?this.s:t.s,n=this.e<t.e?this.e:t.e;return e>=n?null:hn.fromDateTimes(e,n)}union(t){if(!this.isValid)return this;const e=this.s<t.s?this.s:t.s,n=this.e>t.e?this.e:t.e;return hn.fromDateTimes(e,n)}static merge(t){const[e,n]=t.sort(((t,e)=>t.s-e.s)).reduce((([t,e],n)=>e?e.overlaps(n)||e.abutsStart(n)?[t,e.union(n)]:[t.concat([e]),n]:[t,n]),[[],null]);return n&&e.push(n),e}static xor(t){let e=null,n=0;const r=[],s=t.map((t=>[{time:t.s,type:"s"},{time:t.e,type:"e"}])),i=Array.prototype.concat(...s).sort(((t,e)=>t.time-e.time));for(const t of i)n+="s"===t.type?1:-1,1===n?e=t.time:(e&&+e!=+t.time&&r.push(hn.fromDateTimes(e,t.time)),e=null);return hn.merge(r)}difference(...t){return hn.xor([this].concat(t)).map((t=>this.intersection(t))).filter((t=>t&&!t.isEmpty()))}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:dn}toLocaleString(t=x,e={}){return this.isValid?de.create(this.s.loc.clone(e),t).formatInterval(this):dn}toISO(t){return this.isValid?`${this.s.toISO(t)}/${this.e.toISO(t)}`:dn}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:dn}toISOTime(t){return this.isValid?`${this.s.toISOTime(t)}/${this.e.toISOTime(t)}`:dn}toFormat(t,{separator:e=" – "}={}){return this.isValid?`${this.s.toFormat(t)}${e}${this.e.toFormat(t)}`:dn}toDuration(t,e){return this.isValid?this.e.diff(this.s,t,e):cn.invalid(this.invalidReason)}mapEndpoints(t){return hn.fromDateTimes(t(this.s),t(this.e))}}class mn{static hasDST(t=kt.defaultZone){const e=mr.now().setZone(t).set({month:12});return!t.isUniversal&&e.offset!==e.set({month:6}).offset}static isValidIANAZone(t){return nt.isValidZone(t)}static normalizeZone(t){return gt(t,kt.defaultZone)}static months(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null,outputCalendar:s="gregory"}={}){return(r||mt.create(e,n,s)).months(t)}static monthsFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null,outputCalendar:s="gregory"}={}){return(r||mt.create(e,n,s)).months(t,!0)}static weekdays(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null}={}){return(r||mt.create(e,n,null)).weekdays(t)}static weekdaysFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:r=null}={}){return(r||mt.create(e,n,null)).weekdays(t,!0)}static meridiems({locale:t=null}={}){return mt.create(t).meridiems()}static eras(t="short",{locale:e=null}={}){return mt.create(e,null,"gregory").eras(t)}static features(){return{relative:Nt()}}}function fn(t,e){const n=t=>t.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),r=n(e)-n(t);return Math.floor(cn.fromMillis(r).as("days"))}const yn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},pn={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},gn=yn.hanidec.replace(/[\[|\]]/g,"").split("");function wn({numberingSystem:t},e=""){return new RegExp(`${yn[t||"latn"]}${e}`)}function vn(t,e=(t=>t)){return{regex:t,deser:([t])=>e(function(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const r=t.charCodeAt(n);if(-1!==t[n].search(yn.hanidec))e+=gn.indexOf(t[n]);else for(const t in pn){const[n,s]=pn[t];r>=n&&r<=s&&(e+=r-n)}}return parseInt(e,10)}return e}(t))}}const An=`[ ${String.fromCharCode(160)}]`,bn=new RegExp(An,"g");function Tn(t){return t.replace(/\./g,"\\.?").replace(bn,An)}function Cn(t){return t.replace(/\./g,"").replace(bn," ").toLowerCase()}function Sn(t,e){return null===t?null:{regex:RegExp(t.map(Tn).join("|")),deser:([n])=>t.findIndex((t=>Cn(n)===Cn(t)))+e}}function kn(t,e){return{regex:t,deser:([,t,e])=>Wt(t,e),groups:e}}function En(t){return{regex:t,deser:([t])=>t}}const On={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let xn=null;function Nn(t,e){return Array.prototype.concat(...t.map((t=>function(t,e){if(t.literal)return t;const n=Dn(de.macroTokenToFormatOpts(t.val),e);return null==n||n.includes(void 0)?t:n}(t,e))))}function Mn(t,e,n){const r=Nn(de.parseFormat(n),t),s=r.map((e=>function(t,e){const n=wn(e),r=wn(e,"{2}"),s=wn(e,"{3}"),i=wn(e,"{4}"),o=wn(e,"{6}"),a=wn(e,"{1,2}"),u=wn(e,"{1,3}"),l=wn(e,"{1,6}"),c=wn(e,"{1,9}"),d=wn(e,"{2,4}"),h=wn(e,"{4,6}"),m=t=>{return{regex:RegExp((e=t.val,e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:([t])=>t,literal:!0};var e},f=(f=>{if(t.literal)return m(f);switch(f.val){case"G":return Sn(e.eras("short"),0);case"GG":return Sn(e.eras("long"),0);case"y":return vn(l);case"yy":case"kk":return vn(d,Ut);case"yyyy":case"kkkk":return vn(i);case"yyyyy":return vn(h);case"yyyyyy":return vn(o);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return vn(a);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return vn(r);case"MMM":return Sn(e.months("short",!0),1);case"MMMM":return Sn(e.months("long",!0),1);case"LLL":return Sn(e.months("short",!1),1);case"LLLL":return Sn(e.months("long",!1),1);case"o":case"S":return vn(u);case"ooo":case"SSS":return vn(s);case"u":return En(c);case"uu":return En(a);case"uuu":case"E":case"c":return vn(n);case"a":return Sn(e.meridiems(),0);case"EEE":return Sn(e.weekdays("short",!1),1);case"EEEE":return Sn(e.weekdays("long",!1),1);case"ccc":return Sn(e.weekdays("short",!0),1);case"cccc":return Sn(e.weekdays("long",!0),1);case"Z":case"ZZ":return kn(new RegExp(`([+-]${a.source})(?::(${r.source}))?`),2);case"ZZZ":return kn(new RegExp(`([+-]${a.source})(${r.source})?`),2);case"z":return En(/[a-z_+-/]{1,256}?/i);case" ":return En(/[^\S\n\r]/);default:return m(f)}})(t)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return f.token=t,f}(e,t))),i=s.find((t=>t.invalidReason));if(i)return{input:e,tokens:r,invalidReason:i.invalidReason};{const[t,n]=function(t){return[`^${t.map((t=>t.regex)).reduce(((t,e)=>`${t}(${e.source})`),"")}$`,t]}(s),i=RegExp(t,"i"),[o,a]=function(t,e,n){const r=t.match(e);if(r){const t={};let e=1;for(const s in n)if(Dt(n,s)){const i=n[s],o=i.groups?i.groups+1:1;!i.literal&&i.token&&(t[i.token.val[0]]=i.deser(r.slice(e,e+o))),e+=o}return[r,t]}return[r,{}]}(e,i,n),[u,l,c]=a?function(t){let e,n=null;return Et(t.z)||(n=nt.create(t.z)),Et(t.Z)||(n||(n=new yt(t.Z)),e=t.Z),Et(t.q)||(t.M=3*(t.q-1)+1),Et(t.h)||(t.h<12&&1===t.a?t.h+=12:12===t.h&&0===t.a&&(t.h=0)),0===t.G&&t.y&&(t.y=-t.y),Et(t.u)||(t.S=Lt(t.u)),[Object.keys(t).reduce(((e,n)=>{const r=(t=>{switch(t){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(n);return r&&(e[r]=t[n]),e}),{}),n,e]}(a):[null,null,void 0];if(Dt(a,"a")&&Dt(a,"H"))throw new b("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:r,regex:i,rawMatches:o,matches:a,result:u,zone:l,specificOffset:c}}}function Dn(t,e){if(!t)return null;const n=de.create(e,t).dtFormatter((xn||(xn=mr.fromMillis(1555555555555)),xn)),r=n.formatToParts(),s=n.resolvedOptions();return r.map((e=>function(t,e,n){const{type:r,value:s}=t;if("literal"===r){const t=/^\s+$/.test(s);return{literal:!t,val:t?" ":s}}const i=e[r];let o=r;"hour"===r&&(o=null!=e.hour12?e.hour12?"hour12":"hour24":null!=e.hourCycle?"h11"===e.hourCycle||"h12"===e.hourCycle?"hour12":"hour24":n.hour12?"hour12":"hour24");let a=On[o];if("object"==typeof a&&(a=a[i]),a)return{literal:!1,val:a}}(e,t,s)))}const Vn=[0,31,59,90,120,151,181,212,243,273,304,334],In=[0,31,60,91,121,152,182,213,244,274,305,335];function Fn(t,e){return new he("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function Zn(t,e,n){const r=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&r.setUTCFullYear(r.getUTCFullYear()-1900);const s=r.getUTCDay();return 0===s?7:s}function Ln(t,e,n){return n+(zt(t)?In:Vn)[e-1]}function $n(t,e){const n=zt(t)?In:Vn,r=n.findIndex((t=>t<e));return{month:r+1,day:e-n[r]}}function zn(t){const{year:e,month:n,day:r}=t,s=Ln(e,n,r),i=Zn(e,n,r);let o,a=Math.floor((s-i+10)/7);return a<1?(o=e-1,a=_t(o)):a>_t(e)?(o=e+1,a=1):o=e,{weekYear:o,weekNumber:a,weekday:i,...Jt(t)}}function Bn(t){const{weekYear:e,weekNumber:n,weekday:r}=t,s=Zn(e,1,4),i=Bt(e);let o,a=7*n+r-s-3;a<1?(o=e-1,a+=Bt(o)):a>i?(o=e+1,a-=Bt(e)):o=e;const{month:u,day:l}=$n(o,a);return{year:o,month:u,day:l,...Jt(t)}}function jn(t){const{year:e,month:n,day:r}=t;return{year:e,ordinal:Ln(e,n,r),...Jt(t)}}function qn(t){const{year:e,ordinal:n}=t,{month:r,day:s}=$n(e,n);return{year:e,month:r,day:s,...Jt(t)}}function _n(t){const e=xt(t.year),n=Vt(t.month,1,12),r=Vt(t.day,1,jt(t.year,t.month));return e?n?!r&&Fn("day",t.day):Fn("month",t.month):Fn("year",t.year)}function Un(t){const{hour:e,minute:n,second:r,millisecond:s}=t,i=Vt(e,0,23)||24===e&&0===n&&0===r&&0===s,o=Vt(n,0,59),a=Vt(r,0,59),u=Vt(s,0,999);return i?o?a?!u&&Fn("millisecond",s):Fn("second",r):Fn("minute",n):Fn("hour",e)}const Hn="Invalid DateTime",Wn=864e13;function Rn(t){return new he("unsupported zone",`the zone "${t.name}" is not supported`)}function Yn(t){return null===t.weekData&&(t.weekData=zn(t.c)),t.weekData}function Pn(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new mr({...n,...e,old:n})}function Jn(t,e,n){let r=t-60*e*1e3;const s=n.offset(r);if(e===s)return[r,e];r-=60*(s-e)*1e3;const i=n.offset(r);return s===i?[r,s]:[t-60*Math.min(s,i)*1e3,Math.max(s,i)]}function Gn(t,e){const n=new Date(t+=60*e*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function Qn(t,e,n){return Jn(qt(t),e,n)}function Kn(t,e){const n=t.o,r=t.c.year+Math.trunc(e.years),s=t.c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters),i={...t.c,year:r,month:s,day:Math.min(t.c.day,jt(r,s))+Math.trunc(e.days)+7*Math.trunc(e.weeks)},o=cn.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),a=qt(i);let[u,l]=Jn(a,n,t.zone);return 0!==o&&(u+=o,l=t.zone.offset(u)),{ts:u,o:l}}function Xn(t,e,n,r,s,i){const{setZone:o,zone:a}=n;if(t&&0!==Object.keys(t).length||e){const r=e||a,s=mr.fromObject(t,{...n,zone:r,specificOffset:i});return o?s:s.setZone(a)}return mr.invalid(new he("unparsable",`the input "${s}" can't be parsed as ${r}`))}function tr(t,e,n=!0){return t.isValid?de.create(mt.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function er(t,e){const n=t.c.year>9999||t.c.year<0;let r="";return n&&t.c.year>=0&&(r+="+"),r+=It(t.c.year,n?6:4),e?(r+="-",r+=It(t.c.month),r+="-",r+=It(t.c.day)):(r+=It(t.c.month),r+=It(t.c.day)),r}function nr(t,e,n,r,s,i){let o=It(t.c.hour);return e?(o+=":",o+=It(t.c.minute),0===t.c.millisecond&&0===t.c.second&&n||(o+=":")):o+=It(t.c.minute),0===t.c.millisecond&&0===t.c.second&&n||(o+=It(t.c.second),0===t.c.millisecond&&r||(o+=".",o+=It(t.c.millisecond,3))),s&&(t.isOffsetFixed&&0===t.offset&&!i?o+="Z":t.o<0?(o+="-",o+=It(Math.trunc(-t.o/60)),o+=":",o+=It(Math.trunc(-t.o%60))):(o+="+",o+=It(Math.trunc(t.o/60)),o+=":",o+=It(Math.trunc(t.o%60)))),i&&(o+="["+t.zone.ianaName+"]"),o}const rr={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},sr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},ir={ordinal:1,hour:0,minute:0,second:0,millisecond:0},or=["year","month","day","hour","minute","second","millisecond"],ar=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],ur=["year","ordinal","hour","minute","second","millisecond"];function lr(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new T(t);return e}function cr(t,e){const n=gt(e.zone,kt.defaultZone),r=mt.fromObject(e),s=kt.now();let i,o;if(Et(t.year))i=s;else{for(const e of or)Et(t[e])&&(t[e]=rr[e]);const e=_n(t)||Un(t);if(e)return mr.invalid(e);const r=n.offset(s);[i,o]=Qn(t,r,n)}return new mr({ts:i,zone:n,loc:r,o})}function dr(t,e,n){const r=!!Et(n.round)||n.round,s=(t,s)=>(t=$t(t,r||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(t,s)),i=r=>n.calendary?e.hasSame(t,r)?0:e.startOf(r).diff(t.startOf(r),r).get(r):e.diff(t,r).get(r);if(n.unit)return s(i(n.unit),n.unit);for(const t of n.units){const e=i(t);if(Math.abs(e)>=1)return s(e,t)}return s(t>e?-0:0,n.units[n.units.length-1])}function hr(t){let e,n={};return t.length>0&&"object"==typeof t[t.length-1]?(n=t[t.length-1],e=Array.from(t).slice(0,t.length-1)):e=Array.from(t),[n,e]}class mr{constructor(t){const e=t.zone||kt.defaultZone;let n=t.invalid||(Number.isNaN(t.ts)?new he("invalid input"):null)||(e.isValid?null:Rn(e));this.ts=Et(t.ts)?kt.now():t.ts;let r=null,s=null;if(!n)if(t.old&&t.old.ts===this.ts&&t.old.zone.equals(e))[r,s]=[t.old.c,t.old.o];else{const t=e.offset(this.ts);r=Gn(this.ts,t),n=Number.isNaN(r.year)?new he("invalid input"):null,r=n?null:r,s=n?null:t}this._zone=e,this.loc=t.loc||mt.create(),this.invalid=n,this.weekData=null,this.c=r,this.o=s,this.isLuxonDateTime=!0}static now(){return new mr({})}static local(){const[t,e]=hr(arguments),[n,r,s,i,o,a,u]=e;return cr({year:n,month:r,day:s,hour:i,minute:o,second:a,millisecond:u},t)}static utc(){const[t,e]=hr(arguments),[n,r,s,i,o,a,u]=e;return t.zone=yt.utcInstance,cr({year:n,month:r,day:s,hour:i,minute:o,second:a,millisecond:u},t)}static fromJSDate(t,e={}){const n=(r=t,"[object Date]"===Object.prototype.toString.call(r)?t.valueOf():NaN);var r;if(Number.isNaN(n))return mr.invalid("invalid input");const s=gt(e.zone,kt.defaultZone);return s.isValid?new mr({ts:n,zone:s,loc:mt.fromObject(e)}):mr.invalid(Rn(s))}static fromMillis(t,e={}){if(Ot(t))return t<-Wn||t>Wn?mr.invalid("Timestamp out of range"):new mr({ts:t,zone:gt(e.zone,kt.defaultZone),loc:mt.fromObject(e)});throw new C(`fromMillis requires a numerical input, but received a ${typeof t} with value ${t}`)}static fromSeconds(t,e={}){if(Ot(t))return new mr({ts:1e3*t,zone:gt(e.zone,kt.defaultZone),loc:mt.fromObject(e)});throw new C("fromSeconds requires a numerical input")}static fromObject(t,e={}){t=t||{};const n=gt(e.zone,kt.defaultZone);if(!n.isValid)return mr.invalid(Rn(n));const r=kt.now(),s=Et(e.specificOffset)?n.offset(r):e.specificOffset,i=Yt(t,lr),o=!Et(i.ordinal),a=!Et(i.year),u=!Et(i.month)||!Et(i.day),l=a||u,c=i.weekYear||i.weekNumber,d=mt.fromObject(e);if((l||o)&&c)throw new b("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(u&&o)throw new b("Can't mix ordinal dates with month/day");const h=c||i.weekday&&!l;let m,f,y=Gn(r,s);h?(m=ar,f=sr,y=zn(y)):o?(m=ur,f=ir,y=jn(y)):(m=or,f=rr);let p=!1;for(const t of m)Et(i[t])?i[t]=p?f[t]:y[t]:p=!0;const g=h?function(t){const e=xt(t.weekYear),n=Vt(t.weekNumber,1,_t(t.weekYear)),r=Vt(t.weekday,1,7);return e?n?!r&&Fn("weekday",t.weekday):Fn("week",t.week):Fn("weekYear",t.weekYear)}(i):o?function(t){const e=xt(t.year),n=Vt(t.ordinal,1,Bt(t.year));return e?!n&&Fn("ordinal",t.ordinal):Fn("year",t.year)}(i):_n(i),w=g||Un(i);if(w)return mr.invalid(w);const v=h?Bn(i):o?qn(i):i,[A,T]=Qn(v,s,n),C=new mr({ts:A,zone:n,o:T,loc:d});return i.weekday&&l&&t.weekday!==C.weekday?mr.invalid("mismatched weekday",`you can't specify both a weekday of ${i.weekday} and a date of ${C.toISO()}`):C}static fromISO(t,e={}){const[n,r]=function(t){return pe(t,[_e,Re],[Ue,Ye],[He,Pe],[We,Je])}(t);return Xn(n,r,e,"ISO 8601",t)}static fromRFC2822(t,e={}){const[n,r]=function(t){return pe(function(t){return t.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(t),[Ze,Le])}(t);return Xn(n,r,e,"RFC 2822",t)}static fromHTTP(t,e={}){const[n,r]=function(t){return pe(t,[$e,je],[ze,je],[Be,qe])}(t);return Xn(n,r,e,"HTTP",e)}static fromFormat(t,e,n={}){if(Et(t)||Et(e))throw new C("fromFormat requires an input string and a format");const{locale:r=null,numberingSystem:s=null}=n,i=mt.fromOpts({locale:r,numberingSystem:s,defaultToEN:!0}),[o,a,u,l]=function(t,e,n){const{result:r,zone:s,specificOffset:i,invalidReason:o}=Mn(t,e,n);return[r,s,i,o]}(i,t,e);return l?mr.invalid(l):Xn(o,a,n,`format ${e}`,t,u)}static fromString(t,e,n={}){return mr.fromFormat(t,e,n)}static fromSQL(t,e={}){const[n,r]=function(t){return pe(t,[Qe,Re],[Ke,Xe])}(t);return Xn(n,r,e,"SQL",t)}static invalid(t,e=null){if(!t)throw new C("need to specify a reason the DateTime is invalid");const n=t instanceof he?t:new he(t,e);if(kt.throwOnInvalid)throw new w(n);return new mr({invalid:n})}static isDateTime(t){return t&&t.isLuxonDateTime||!1}static parseFormatForOpts(t,e={}){const n=Dn(t,mt.fromObject(e));return n?n.map((t=>t?t.val:null)).join(""):null}static expandFormat(t,e={}){return Nn(de.parseFormat(t),mt.fromObject(e)).map((t=>t.val)).join("")}get(t){return this[t]}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?Yn(this).weekYear:NaN}get weekNumber(){return this.isValid?Yn(this).weekNumber:NaN}get weekday(){return this.isValid?Yn(this).weekday:NaN}get ordinal(){return this.isValid?jn(this.c).ordinal:NaN}get monthShort(){return this.isValid?mn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?mn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?mn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?mn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}getPossibleOffsets(){if(!this.isValid||this.isOffsetFixed)return[this];const t=864e5,e=6e4,n=qt(this.c),r=this.zone.offset(n-t),s=this.zone.offset(n+t),i=this.zone.offset(n-r*e),o=this.zone.offset(n-s*e);if(i===o)return[this];const a=n-i*e,u=n-o*e,l=Gn(a,i),c=Gn(u,o);return l.hour===c.hour&&l.minute===c.minute&&l.second===c.second&&l.millisecond===c.millisecond?[Pn(this,{ts:a}),Pn(this,{ts:u})]:[this]}get isInLeapYear(){return zt(this.year)}get daysInMonth(){return jt(this.year,this.month)}get daysInYear(){return this.isValid?Bt(this.year):NaN}get weeksInWeekYear(){return this.isValid?_t(this.weekYear):NaN}resolvedLocaleOptions(t={}){const{locale:e,numberingSystem:n,calendar:r}=de.create(this.loc.clone(t),t).resolvedOptions(this);return{locale:e,numberingSystem:n,outputCalendar:r}}toUTC(t=0,e={}){return this.setZone(yt.instance(t),e)}toLocal(){return this.setZone(kt.defaultZone)}setZone(t,{keepLocalTime:e=!1,keepCalendarTime:n=!1}={}){if((t=gt(t,kt.defaultZone)).equals(this.zone))return this;if(t.isValid){let r=this.ts;if(e||n){const e=t.offset(this.ts),n=this.toObject();[r]=Qn(n,e,t)}return Pn(this,{ts:r,zone:t})}return mr.invalid(Rn(t))}reconfigure({locale:t,numberingSystem:e,outputCalendar:n}={}){return Pn(this,{loc:this.loc.clone({locale:t,numberingSystem:e,outputCalendar:n})})}setLocale(t){return this.reconfigure({locale:t})}set(t){if(!this.isValid)return this;const e=Yt(t,lr),n=!Et(e.weekYear)||!Et(e.weekNumber)||!Et(e.weekday),r=!Et(e.ordinal),s=!Et(e.year),i=!Et(e.month)||!Et(e.day),o=s||i,a=e.weekYear||e.weekNumber;if((o||r)&&a)throw new b("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(i&&r)throw new b("Can't mix ordinal dates with month/day");let u;n?u=Bn({...zn(this.c),...e}):Et(e.ordinal)?(u={...this.toObject(),...e},Et(e.day)&&(u.day=Math.min(jt(u.year,u.month),u.day))):u=qn({...jn(this.c),...e});const[l,c]=Qn(u,this.o,this.zone);return Pn(this,{ts:l,o:c})}plus(t){return this.isValid?Pn(this,Kn(this,cn.fromDurationLike(t))):this}minus(t){return this.isValid?Pn(this,Kn(this,cn.fromDurationLike(t).negate())):this}startOf(t){if(!this.isValid)return this;const e={},n=cn.normalizeUnit(t);switch(n){case"years":e.month=1;case"quarters":case"months":e.day=1;case"weeks":case"days":e.hour=0;case"hours":e.minute=0;case"minutes":e.second=0;case"seconds":e.millisecond=0}if("weeks"===n&&(e.weekday=1),"quarters"===n){const t=Math.ceil(this.month/3);e.month=3*(t-1)+1}return this.set(e)}endOf(t){return this.isValid?this.plus({[t]:1}).startOf(t).minus(1):this}toFormat(t,e={}){return this.isValid?de.create(this.loc.redefaultToEN(e)).formatDateTimeFromString(this,t):Hn}toLocaleString(t=x,e={}){return this.isValid?de.create(this.loc.clone(e),t).formatDateTime(this):Hn}toLocaleParts(t={}){return this.isValid?de.create(this.loc.clone(t),t).formatDateTimeParts(this):[]}toISO({format:t="extended",suppressSeconds:e=!1,suppressMilliseconds:n=!1,includeOffset:r=!0,extendedZone:s=!1}={}){if(!this.isValid)return null;const i="extended"===t;let o=er(this,i);return o+="T",o+=nr(this,i,e,n,r,s),o}toISODate({format:t="extended"}={}){return this.isValid?er(this,"extended"===t):null}toISOWeekDate(){return tr(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:t=!1,suppressSeconds:e=!1,includeOffset:n=!0,includePrefix:r=!1,extendedZone:s=!1,format:i="extended"}={}){return this.isValid?(r?"T":"")+nr(this,"extended"===i,e,t,n,s):null}toRFC2822(){return tr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return tr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?er(this,!0):null}toSQLTime({includeOffset:t=!0,includeZone:e=!1,includeOffsetSpace:n=!0}={}){let r="HH:mm:ss.SSS";return(e||t)&&(n&&(r+=" "),e?r+="z":t&&(r+="ZZ")),tr(this,r,!0)}toSQL(t={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(t)}`:null}toString(){return this.isValid?this.toISO():Hn}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(t={}){if(!this.isValid)return{};const e={...this.c};return t.includeConfig&&(e.outputCalendar=this.outputCalendar,e.numberingSystem=this.loc.numberingSystem,e.locale=this.loc.locale),e}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(t,e="milliseconds",n={}){if(!this.isValid||!t.isValid)return cn.invalid("created by diffing an invalid DateTime");const r={locale:this.locale,numberingSystem:this.numberingSystem,...n},s=(a=e,Array.isArray(a)?a:[a]).map(cn.normalizeUnit),i=t.valueOf()>this.valueOf(),o=function(t,e,n,r){let[s,i,o,a]=function(t,e,n){const r=[["years",(t,e)=>e.year-t.year],["quarters",(t,e)=>e.quarter-t.quarter+4*(e.year-t.year)],["months",(t,e)=>e.month-t.month+12*(e.year-t.year)],["weeks",(t,e)=>{const n=fn(t,e);return(n-n%7)/7}],["days",fn]],s={},i=t;let o,a;for(const[u,l]of r)n.indexOf(u)>=0&&(o=u,s[u]=l(t,e),a=i.plus(s),a>e?(s[u]--,(t=i.plus(s))>e&&(a=t,s[u]--,t=i.plus(s))):t=a);return[t,s,a,o]}(t,e,n);const u=e-s,l=n.filter((t=>["hours","minutes","seconds","milliseconds"].indexOf(t)>=0));0===l.length&&(o<e&&(o=s.plus({[a]:1})),o!==s&&(i[a]=(i[a]||0)+u/(o-s)));const c=cn.fromObject(i,r);return l.length>0?cn.fromMillis(u,r).shiftTo(...l).plus(c):c}(i?this:t,i?t:this,s,r);var a;return i?o.negate():o}diffNow(t="milliseconds",e={}){return this.diff(mr.now(),t,e)}until(t){return this.isValid?hn.fromDateTimes(this,t):this}hasSame(t,e){if(!this.isValid)return!1;const n=t.valueOf(),r=this.setZone(t.zone,{keepLocalTime:!0});return r.startOf(e)<=n&&n<=r.endOf(e)}equals(t){return this.isValid&&t.isValid&&this.valueOf()===t.valueOf()&&this.zone.equals(t.zone)&&this.loc.equals(t.loc)}toRelative(t={}){if(!this.isValid)return null;const e=t.base||mr.fromObject({},{zone:this.zone}),n=t.padding?this<e?-t.padding:t.padding:0;let r=["years","months","days","hours","minutes","seconds"],s=t.unit;return Array.isArray(t.unit)&&(r=t.unit,s=void 0),dr(e,this.plus(n),{...t,numeric:"always",units:r,unit:s})}toRelativeCalendar(t={}){return this.isValid?dr(t.base||mr.fromObject({},{zone:this.zone}),this,{...t,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...t){if(!t.every(mr.isDateTime))throw new C("min requires all arguments be DateTimes");return Mt(t,(t=>t.valueOf()),Math.min)}static max(...t){if(!t.every(mr.isDateTime))throw new C("max requires all arguments be DateTimes");return Mt(t,(t=>t.valueOf()),Math.max)}static fromFormatExplain(t,e,n={}){const{locale:r=null,numberingSystem:s=null}=n;return Mn(mt.fromOpts({locale:r,numberingSystem:s,defaultToEN:!0}),t,e)}static fromStringExplain(t,e,n={}){return mr.fromFormatExplain(t,e,n)}static get DATE_SHORT(){return x}static get DATE_MED(){return N}static get DATE_MED_WITH_WEEKDAY(){return M}static get DATE_FULL(){return D}static get DATE_HUGE(){return V}static get TIME_SIMPLE(){return I}static get TIME_WITH_SECONDS(){return F}static get TIME_WITH_SHORT_OFFSET(){return Z}static get TIME_WITH_LONG_OFFSET(){return L}static get TIME_24_SIMPLE(){return $}static get TIME_24_WITH_SECONDS(){return z}static get TIME_24_WITH_SHORT_OFFSET(){return B}static get TIME_24_WITH_LONG_OFFSET(){return j}static get DATETIME_SHORT(){return q}static get DATETIME_SHORT_WITH_SECONDS(){return _}static get DATETIME_MED(){return U}static get DATETIME_MED_WITH_SECONDS(){return H}static get DATETIME_MED_WITH_WEEKDAY(){return W}static get DATETIME_FULL(){return R}static get DATETIME_FULL_WITH_SECONDS(){return Y}static get DATETIME_HUGE(){return P}static get DATETIME_HUGE_WITH_SECONDS(){return J}}function fr(t){if(mr.isDateTime(t))return t;if(t&&t.valueOf&&Ot(t.valueOf()))return mr.fromJSDate(t);if(t&&"object"==typeof t)return mr.fromObject(t);throw new C(`Unknown datetime argument: ${t}, of type ${typeof t}`)}const yr=document.querySelector("#get-data-btn"),pr=document.querySelector("#loader"),gr=document.querySelector("#dark-mode-btn");let wr;const vr=()=>{pr.classList.toggle("loader")},Ar=t=>{clearTimeout(wr),document.querySelector("#error").textContent=t},br=t=>{let e="https://api.weatherapi.com/v1/current.json?key=abee8c3897074fb7930153335232109&q=";Ar(""),document.querySelector("#result").innerHTML="",""!==t?(Ar(""),t.replace(" ","%20"),e+=t,Sr(e).then(Cr).catch(Ar).finally((()=>vr()))):Ar("Please enter a landmark")},Tr=t=>{const e=document.querySelector("#date-time");e.innerHTML="";const n=mr.now().setZone(t),r=document.createElement("p");r.textContent=n.toLocaleString(mr.DATE_FULL);const s=document.createElement("p");s.textContent=n.toLocaleString(mr.TIME_WITH_SECONDS),e.appendChild(r),e.appendChild(s)},Cr=t=>{clearInterval(wr);const e=document.querySelector("#result"),{location:n,current:r}=t,{name:s,region:i,country:o,tz_id:a,lat:u,lon:l}=n,{temp_c:c,temp_f:d,condition:h,wind_kph:m,wind_dir:f,humidity:y,feelslike_c:p,feelslike_f:g,vis_km:w,uv:v}=r,A=document.createElement("h3");A.textContent=`${s}, ${i}, ${o}`;const b=document.createElement("button");b.textContent="Tempreture: "+c.toFixed(1)+"°C",b.addEventListener("click",(()=>{b.textContent=b.textContent.includes("C")?"Tempreture: "+d.toFixed(1)+"°F":"Tempreture: "+c.toFixed(1)+"°C"}));const T=document.createElement("img");T.src=h.icon,T.alt=h.text;const C=document.createElement("div");C.classList.add("inline");const S=document.createElement("p");S.textContent="Condition: "+h.text;const k=document.createElement("p");k.textContent=`Wind: ${m} kph ${f}`;const E=document.createElement("p");E.textContent=`Humidity: ${y}%`;const O=document.createElement("button");O.textContent="Feels like: "+p+"°C",O.addEventListener("click",(()=>{O.textContent=O.textContent.includes("C")?"Feels like: "+g+"°F":"Feels like: "+p+"°C"}));const x=document.createElement("p");x.textContent="Visibility: "+w+"km";const N=document.createElement("p");N.textContent="UV: "+v;const M=document.createElement("p");M.textContent="Lat: "+u;const D=document.createElement("p");D.textContent="Lon: "+l,e.appendChild(A);const V=document.createElement("div");V.setAttribute("id","date-time"),e.appendChild(V),Tr(a),wr=setInterval((()=>Tr(a)),1e3),e.appendChild(b),C.appendChild(S),C.appendChild(T),e.appendChild(C),e.appendChild(k),e.appendChild(E),e.appendChild(O),e.appendChild(x),e.appendChild(N);const I=document.createElement("div");I.classList.add("inline"),e.appendChild(I),I.appendChild(M),I.appendChild(D)},Sr=async t=>{vr();const e=await fetch(t,{mode:"cors"});if(console.log("response",e),200===e.status){const t=await e.json();return console.log("data",t),t}return 403===e.status?Promise.reject("Error fetching data: "+e.status):400===e.status?Promise.reject(document.querySelector("#search").value+" is not a valid landmark"):Promise.reject("Unknown error")};gr.addEventListener("click",(()=>{let t=document.querySelectorAll(".light-mode");0==t.length&&(t=document.querySelectorAll(".dark-mode")),t.forEach((t=>{t.classList.toggle("light-mode"),t.classList.toggle("dark-mode")}))})),document.querySelectorAll(".datamaps-subunit").forEach((t=>t.addEventListener("click",(t=>{br(t.target.__data__.properties.name)})))),yr.addEventListener("click",(t=>{t.preventDefault();const e=document.querySelector("#search").value;br(e)}))}},t=>{t(t.s=48)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,